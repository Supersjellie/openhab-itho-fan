configuration: {}
triggers:
  - id: "1"
    configuration:
      cronExpression: 0/60 * * * * ? *
    type: timer.GenericCronTrigger
  - id: "3"
    configuration:
      itemName: fan_current_speed
    type: core.ItemStateChangeTrigger
conditions: []
actions:
  - inputs: {}
    id: "2"
    configuration:
      type: application/javascript;version=ECMAScript-2021
      script: >-
        /*

        Fan script version 1.0


        Creates (if needed) a mode item under group fan (naming according to script name)

        Updates mode item (0=night,1=day,2=shower)

        Updates speed/timer of fan

        change settings according to your situation (speed can be set as number or 'low/medium/high')

        */


        //##settings##

        var scriptName="fan";//scriptname is used in logging

        var group=scriptName;//default scriptname also used to find fan items

        var nightSpeed=20;//nightspeed, integer value or low/medium/high

        var daySpeed=40;//dayspeed, integer value or low/medium/high

        var humidSpeed=100;//speed for ventilation when humid or low/medium/high or timer1/timer2/timer3

        var dayStart=7;// hour day mode starts (>=)

        var nightStart=23;//hour night mode starts (>=)

        var resetMinutes=60;//minutes manual command can reset to default day/night settings (-1 disable)

        var humidityTreshold=10;// %humidity rise to start

        var delayFanStart=10;//minutes to start fan AFTER humidity raises over treshold

        var delayFanEnd=10;//minutes to keep fan turning after humidity fan start (ignored when speed set to timer1/timer2/timer3)

        var delayFanNextStart=30;//minutes wait for next start


        //init

        console.info(scriptName+"script started");

        var now = time.ZonedDateTime.now();


        //get items

        var fanMode=getAddItem(group,"mode");

        var fanSpeed=searchFirstItem(group,"current_speed");

        var fanCommand=searchFirstItem(group,"command");

        var humidity=searchFirstItem(group,"humidity");


        //create in mem vars (script object is cached in openHAB). Will be erased on script save/change

        if (this.ruleChange==undefined || this.ruleChange==null){
          
          //did the rule change the value?
          this.ruleChange=false;
          
          //last update of speed (-24 allows changes now)
          this.lastUpdate=now.minusHours(24);
          
          //last hour lowest humidity was calculated
          this.baselineHour=-1;
          this.baseline=-1;
          
          //countdown/delay for humidity fan start (minutes, depening on CRON script!)
          this.humidFanStart=-1000-delayFanNextStart;
        }


        //triggered by cron or currentspeed item?

        var valueTrigger=(this.event!=null);


        if (valueTrigger){
          //so thing is updated, meaning command is processed. Clear it (widget used command to color buttons instant)
          if (fanCommand.state!=undefined && fanCommand.state!=null && fanCommand.state!='' && fanCommand.state!='X'){
            //it is a button
            console.debug("Reset command to X");
            if (fanMode.state!=undefined && fanMode.state!=null && fanMode.state>=10){
              //make mode inactive
              fanMode.postUpdate(fanMode.state % 10);
            }
            
            //erase button for openhab (itho addon won't respond)
            fanCommand.sendCommand('X')
          } 
        }


        //why is script running?

        if (valueTrigger && ruleChange){
          //value changed by rule itself. Reset and ignore
          console.debug("trigger=rule");
          ruleChange=false;
        }else if (valueTrigger){
          //triggered by external factor, press on remote, dashboard, fan GUI. Always allow it (before adjusting)
          console.debug("trigger=external");
          lastUpdate=now;
        }else {
          //trigger is CRON job/time based
          console.debug("trigger=cron");

          //reset ruleChange
          ruleChange=false;

          //are automatic changes allowd
          let changeAllowed=true;
          if (resetMinutes>0){
            changeAllowed=now.isAfter(lastUpdate.plusMinutes(resetMinutes));
          }
          
          //current hour
          let hour=now.hour();
          
          //new humidity baseline needed?
          if (hour!=baselineHour){
            //recalc humidity baseline
            baselineHour=hour;
            baseLine=100;
            if (humidity!=null){
              //sensor present
              baseline=humidity.history.averageBetween(now.minusMinutes(70),now.minusMinutes(10));
              console.debug("baseline recalculated "+baseline);
            }
          }

          
          let humididyFanOn=false;
          let humidityRunning=false;
          let humidityOverTreshold=false;
          if (humidity!=null){
            //sensor present
            humidityOverTreshold=(humidity.state>baseline+humidityTreshold);
          }
          

          let timerMode=false;
          if (!Number.isInteger(humidSpeed) && humidSpeed.toString().toLowerCase().startsWith("timer")){
            //speedsetting for humidity is timer (that automatic switched off)
            timerMode=true;
          }
          
          /*
            cycle humidFanStart
            positive number, humidity over treshold. Counting down to starting moment
            0 : start fan
            (small) negative number. Counting down to ending moment
            (large) negative number. Counting down to (possible) restarting moment
            -1000-delayFanNextStart: Done. Waiting for restart (cycle repeats)
          */
          if (humidFanStart<=-1000 && humidFanStart>-1000-delayFanNextStart){
            //wait for next allowed start
            humidFanStart--;
            if (timerMode){
              //timer (by itho addon) determined end. Prevent auto set during wait
              changeAllowed=false;
            }
            
            if (humidFanStart<=-1000 && humidFanStart<=-1000-delayFanNextStart){
              //end of wait period, reset baseline (humidity may have changed)
              baselineHour=-1;
            }
                
          } else if (humidFanStart<=-1000-delayFanNextStart && humidityOverTreshold){ 
            //rise in humidity over treshold
            humidFanStart=delayFanStart
          } else if (humidFanStart<=-1000){
            //off (and keep off)
          }else if (humidFanStart==0){
            //start delay finished, start fan
            humidFanStart--;
            humididyFanOn=true;
            humidityRunning=true;
            changeAllowed=true;//always start!
            console.debug("humidity fan start");
          } else if (humidFanStart>-1000 && humidFanStart<-delayFanEnd){
            //end delay finished, end fan
            humidFanStart=-1000;
            humididyFanOn=false;
            if (timerMode){
              //timer (by itho addon) determines end. Prevent auto set 
              lastUpdate=now;
              changeAllowed=false;
            }else {
              //itho doesn't stop time, so allow/force it
              changeAllowed=true;//always end!
            }
            console.debug("humidity fan end");
          } else {
            //decrease wait timer
            if (humidFanStart<0){
              humidityRunning=true;
            }
            humidFanStart--;
          }
          
          //day or night?
          var day=true;
          if (nightStart<dayStart && hour>=nightStart && hour<dayStart){
            //example 1-7
            day=false;
          } else if (nightStart>dayStart && (hour>=nightStart || hour<dayStart)){
            //example 23-7
            day=false;
          }

          //init auto speedchange
          let mode=null;
          let speed=null;
          let command=null;

          //init speedchange check
          let currentSpeed=fanSpeed.state;
          let checkSpeed=null;

          if ((humididyFanOn || humidityRunning) && Number.isInteger(humidSpeed)){
            speed=humidSpeed;
            mode=2;
          } else if (humididyFanOn || humidityRunning){
            command=humidSpeed;
            mode=2;
          } else if (humidityRunning){
            checkSpeed=humidSpeed;//don't set (allow manual intervention), only check
            mode=2;
          } else if (day && Number.isInteger(daySpeed)){
            speed=daySpeed;
            mode=1;
          }else if (day){
            command=daySpeed;
            mode=1;
          } else if (Number.isInteger(nightSpeed)){
            speed=nightSpeed;
            mode=0;
          }else {
            command=nightSpeed;
            mode=0;
          }
          
          if (checkSpeed==null){
            checkSpeed=speed;
          }

          console.debug(" day="+day+" speed="+speed+" command="+command+" mode="+mode+" "+"change "+changeAllowed+" sp="+ parseInt(currentSpeed));

          //only update items if values are calculated and changed (else rule will trigger itself creating loops)
          if (!changeAllowed && (currentSpeed!=speed || command!=null)){
            //at the moment automatic changes are not allowed (and change is requested), log
            console.debug("no changes allowed");    
          } else if (!changeAllowed){
            //at the moment automatic changes are not allowed
          }else if (speed!=null && speed!=parseInt(fanSpeed.state)){
            fanSpeed.sendCommand(speed);
            currentSpeed=speed;//it will/should become this
            ruleChange=true;
            lastUpdate=now;
            console.info("Writing speed "+fanSpeed);
          } else if (command!=null){
            fanCommand.sendCommand(command);
            ruleChange=true;
            lastUpdate=now;
            console.info("writing command "+command);
          }
          
          //mode active/applied?
          if (mode!=null && checkSpeed==currentSpeed){
            mode+=10;
          }

          //mode changed, write
          if (mode!=null && mode!=parseInt(fanMode.state)){
            fanMode.postUpdate(mode);
          }

        }


        //done

        console.info(scriptName+" done in "+ (-now.getMillisFromNow())+" millisec");



        /*
          ##### functions
        */


        //get an existiing item or create it by (optional) group and name)

        function getAddItem(group,name){
          let item=searchFirstItem(group,name);
          if (item==null){
            if (group==null || group==""){
              //create item without group and add to model
              console.info('creating item '+name);
              item=items.addItem({
                type: 'Number',
                name: name,
                label: name,
                tags: ['Point']
              });      
            } else {
              //create item with group and add to model
              console.info('creating item '+group+'_'+name);
              item=items.addItem({
                type: 'Number',
                name: group+'_'+name,
                label: name,
                groups: [group],
                tags: ['Point']
              });
            }
          }
          
          return item;
        }


        //search items with (optional) group and name (return null or item)

        function searchFirstItem(group, name){
          let list=searchItem(group,name);
          if (list.length>0){
            return list[0];
          } else {
            return null;
          }
        }



        //search items with (optional) group and name (return list)

        function searchItem(group, name){
          let search=name;
          if (group!=null && group!=""){
            search=group+"_"+name;
          }
          return items.getItems().filter(
            function(item){
              return (item.name==this);    
            }
          ,search);
        }
    type: script.ScriptAction
